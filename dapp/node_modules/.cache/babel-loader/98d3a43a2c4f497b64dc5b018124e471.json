{"ast":null,"code":"/*\n    This file is part of web3.js.\n\n    web3.js is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    web3.js is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\n/**\n * @file iban.js\n *\n * Details: https://github.com/ethereum/wiki/wiki/ICAP:-Inter-exchange-Client-Address-Protocol\n *\n * @author Marek Kotewicz <marek@parity.io>\n * @date 2015\n */\n\"use strict\";\n\nvar _classCallCheck = require(\"C:/Users/kotgi/Desktop/HealthBuddy-DApp-master/dapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:/Users/kotgi/Desktop/HealthBuddy-DApp-master/dapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar utils = require('web3-utils');\n\nvar BigNumber = require('bn.js');\n\nvar leftPad = function leftPad(string, bytes) {\n  var result = string;\n\n  while (result.length < bytes * 2) {\n    result = '0' + result;\n  }\n\n  return result;\n};\n/**\n * Prepare an IBAN for mod 97 computation by moving the first 4 chars to the end and transforming the letters to\n * numbers (A = 10, B = 11, ..., Z = 35), as specified in ISO13616.\n *\n * @method iso13616Prepare\n * @param {String} iban the IBAN\n * @returns {String} the prepared IBAN\n */\n\n\nvar iso13616Prepare = function iso13616Prepare(iban) {\n  var A = 'A'.charCodeAt(0);\n  var Z = 'Z'.charCodeAt(0);\n  iban = iban.toUpperCase();\n  iban = iban.substr(4) + iban.substr(0, 4);\n  return iban.split('').map(function (n) {\n    var code = n.charCodeAt(0);\n\n    if (code >= A && code <= Z) {\n      // A = 10, B = 11, ... Z = 35\n      return code - A + 10;\n    } else {\n      return n;\n    }\n  }).join('');\n};\n/**\n * Calculates the MOD 97 10 of the passed IBAN as specified in ISO7064.\n *\n * @method mod9710\n * @param {String} iban\n * @returns {Number}\n */\n\n\nvar mod9710 = function mod9710(iban) {\n  var remainder = iban;\n  var block;\n\n  while (remainder.length > 2) {\n    block = remainder.slice(0, 9);\n    remainder = parseInt(block, 10) % 97 + remainder.slice(block.length);\n  }\n\n  return parseInt(remainder, 10) % 97;\n};\n/**\n * This prototype should be used to create iban object from iban correct string\n *\n * @param {String} iban\n */\n\n\nvar Iban = /*#__PURE__*/function () {\n  function Iban(iban) {\n    _classCallCheck(this, Iban);\n\n    this._iban = iban;\n  }\n  /**\n   * This method should be used to create an ethereum address from a direct iban address\n   *\n   * @method toAddress\n   * @param {String} iban address\n   * @return {String} the ethereum address\n   */\n\n\n  _createClass(Iban, [{\n    key: \"isValid\",\n    value:\n    /**\n     * Should be called to check if iban is correct\n     *\n     * @method isValid\n     * @returns {Boolean} true if it is, otherwise false\n     */\n    function isValid() {\n      return /^XE[0-9]{2}(ETH[0-9A-Z]{13}|[0-9A-Z]{30,31})$/.test(this._iban) && mod9710(iso13616Prepare(this._iban)) === 1;\n    }\n  }, {\n    key: \"isDirect\",\n    value:\n    /**\n     * Should be called to check if iban number is direct\n     *\n     * @method isDirect\n     * @returns {Boolean} true if it is, otherwise false\n     */\n    function isDirect() {\n      return this._iban.length === 34 || this._iban.length === 35;\n    }\n  }, {\n    key: \"isIndirect\",\n    value:\n    /**\n     * Should be called to check if iban number if indirect\n     *\n     * @method isIndirect\n     * @returns {Boolean} true if it is, otherwise false\n     */\n    function isIndirect() {\n      return this._iban.length === 20;\n    }\n  }, {\n    key: \"checksum\",\n    value:\n    /**\n     * Should be called to get iban checksum\n     * Uses the mod-97-10 checksumming protocol (ISO/IEC 7064:2003)\n     *\n     * @method checksum\n     * @returns {String} checksum\n     */\n    function checksum() {\n      return this._iban.substr(2, 2);\n    }\n  }, {\n    key: \"institution\",\n    value:\n    /**\n     * Should be called to get institution identifier\n     * eg. XREG\n     *\n     * @method institution\n     * @returns {String} institution identifier\n     */\n    function institution() {\n      return this.isIndirect() ? this._iban.substr(7, 4) : '';\n    }\n  }, {\n    key: \"client\",\n    value:\n    /**\n     * Should be called to get client identifier within institution\n     * eg. GAVOFYORK\n     *\n     * @method client\n     * @returns {String} client identifier\n     */\n    function client() {\n      return this.isIndirect() ? this._iban.substr(11) : '';\n    }\n  }, {\n    key: \"toAddress\",\n    value:\n    /**\n     * Should be called to get client direct address\n     *\n     * @method toAddress\n     * @returns {String} ethereum address\n     */\n    function toAddress() {\n      if (this.isDirect()) {\n        var base36 = this._iban.substr(4);\n\n        var asBn = new BigNumber(base36, 36);\n        return utils.toChecksumAddress(asBn.toString(16, 20));\n      }\n\n      return '';\n    }\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      return this._iban;\n    }\n  }], [{\n    key: \"toAddress\",\n    value: function toAddress(ib) {\n      ib = new Iban(ib);\n\n      if (!ib.isDirect()) {\n        throw new Error('IBAN is indirect and can\\'t be converted');\n      }\n\n      return ib.toAddress();\n    }\n    /**\n     * This method should be used to create iban address from an ethereum address\n     *\n     * @method toIban\n     * @param {String} address\n     * @return {String} the IBAN address\n     */\n\n  }, {\n    key: \"toIban\",\n    value: function toIban(address) {\n      return Iban.fromAddress(address).toString();\n    }\n    /**\n     * This method should be used to create iban object from an ethereum address\n     *\n     * @method fromAddress\n     * @param {String} address\n     * @return {Iban} the IBAN object\n     */\n\n  }, {\n    key: \"fromAddress\",\n    value: function fromAddress(address) {\n      if (!utils.isAddress(address)) {\n        throw new Error('Provided address is not a valid address: ' + address);\n      }\n\n      address = address.replace('0x', '').replace('0X', '');\n      var asBn = new BigNumber(address, 16);\n      var base36 = asBn.toString(36);\n      var padded = leftPad(base36, 15);\n      return Iban.fromBban(padded.toUpperCase());\n    }\n    /**\n     * Convert the passed BBAN to an IBAN for this country specification.\n     * Please note that <i>\"generation of the IBAN shall be the exclusive responsibility of the bank/branch servicing the account\"</i>.\n     * This method implements the preferred algorithm described in http://en.wikipedia.org/wiki/International_Bank_Account_Number#Generating_IBAN_check_digits\n     *\n     * @method fromBban\n     * @param {String} bban the BBAN to convert to IBAN\n     * @returns {Iban} the IBAN object\n     */\n\n  }, {\n    key: \"fromBban\",\n    value: function fromBban(bban) {\n      var countryCode = 'XE';\n      var remainder = mod9710(iso13616Prepare(countryCode + '00' + bban));\n      var checkDigit = ('0' + (98 - remainder)).slice(-2);\n      return new Iban(countryCode + checkDigit + bban);\n    }\n    /**\n     * Should be used to create IBAN object for given institution and identifier\n     *\n     * @method createIndirect\n     * @param {Object} options, required options are \"institution\" and \"identifier\"\n     * @return {Iban} the IBAN object\n     */\n\n  }, {\n    key: \"createIndirect\",\n    value: function createIndirect(options) {\n      return Iban.fromBban('ETH' + options.institution + options.identifier);\n    }\n    /**\n     * This method should be used to check if given string is valid iban object\n     *\n     * @method isValid\n     * @param {String} iban string\n     * @return {Boolean} true if it is valid IBAN\n     */\n\n  }, {\n    key: \"isValid\",\n    value: function isValid(iban) {\n      var i = new Iban(iban);\n      return i.isValid();\n    }\n  }]);\n\n  return Iban;\n}();\n\nmodule.exports = Iban;","map":{"version":3,"sources":["C:/Users/kotgi/Desktop/HealthBuddy-DApp-master/dapp/node_modules/web3-eth-iban/lib/index.js"],"names":["utils","require","BigNumber","leftPad","string","bytes","result","length","iso13616Prepare","iban","A","charCodeAt","Z","toUpperCase","substr","split","map","n","code","join","mod9710","remainder","block","slice","parseInt","Iban","_iban","test","isIndirect","isDirect","base36","asBn","toChecksumAddress","toString","ib","Error","toAddress","address","fromAddress","isAddress","replace","padded","fromBban","bban","countryCode","checkDigit","options","institution","identifier","i","isValid","module","exports"],"mappings":"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","sourcesContent":["/*\n    This file is part of web3.js.\n\n    web3.js is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    web3.js is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n/**\n * @file iban.js\n *\n * Details: https://github.com/ethereum/wiki/wiki/ICAP:-Inter-exchange-Client-Address-Protocol\n *\n * @author Marek Kotewicz <marek@parity.io>\n * @date 2015\n */\n\"use strict\";\nconst utils = require('web3-utils');\nconst BigNumber = require('bn.js');\nconst leftPad = function (string, bytes) {\n    let result = string;\n    while (result.length < bytes * 2) {\n        result = '0' + result;\n    }\n    return result;\n};\n/**\n * Prepare an IBAN for mod 97 computation by moving the first 4 chars to the end and transforming the letters to\n * numbers (A = 10, B = 11, ..., Z = 35), as specified in ISO13616.\n *\n * @method iso13616Prepare\n * @param {String} iban the IBAN\n * @returns {String} the prepared IBAN\n */\nconst iso13616Prepare = function (iban) {\n    const A = 'A'.charCodeAt(0);\n    const Z = 'Z'.charCodeAt(0);\n    iban = iban.toUpperCase();\n    iban = iban.substr(4) + iban.substr(0, 4);\n    return iban.split('').map(function (n) {\n        const code = n.charCodeAt(0);\n        if (code >= A && code <= Z) {\n            // A = 10, B = 11, ... Z = 35\n            return code - A + 10;\n        }\n        else {\n            return n;\n        }\n    }).join('');\n};\n/**\n * Calculates the MOD 97 10 of the passed IBAN as specified in ISO7064.\n *\n * @method mod9710\n * @param {String} iban\n * @returns {Number}\n */\nconst mod9710 = function (iban) {\n    let remainder = iban;\n    let block;\n    while (remainder.length > 2) {\n        block = remainder.slice(0, 9);\n        remainder = parseInt(block, 10) % 97 + remainder.slice(block.length);\n    }\n    return parseInt(remainder, 10) % 97;\n};\n/**\n * This prototype should be used to create iban object from iban correct string\n *\n * @param {String} iban\n */\nclass Iban {\n    constructor(iban) {\n        this._iban = iban;\n    }\n    /**\n     * This method should be used to create an ethereum address from a direct iban address\n     *\n     * @method toAddress\n     * @param {String} iban address\n     * @return {String} the ethereum address\n     */\n    static toAddress(ib) {\n        ib = new Iban(ib);\n        if (!ib.isDirect()) {\n            throw new Error('IBAN is indirect and can\\'t be converted');\n        }\n        return ib.toAddress();\n    }\n    /**\n     * This method should be used to create iban address from an ethereum address\n     *\n     * @method toIban\n     * @param {String} address\n     * @return {String} the IBAN address\n     */\n    static toIban(address) {\n        return Iban.fromAddress(address).toString();\n    }\n    /**\n     * This method should be used to create iban object from an ethereum address\n     *\n     * @method fromAddress\n     * @param {String} address\n     * @return {Iban} the IBAN object\n     */\n    static fromAddress(address) {\n        if (!utils.isAddress(address)) {\n            throw new Error('Provided address is not a valid address: ' + address);\n        }\n        address = address.replace('0x', '').replace('0X', '');\n        const asBn = new BigNumber(address, 16);\n        const base36 = asBn.toString(36);\n        const padded = leftPad(base36, 15);\n        return Iban.fromBban(padded.toUpperCase());\n    }\n    /**\n     * Convert the passed BBAN to an IBAN for this country specification.\n     * Please note that <i>\"generation of the IBAN shall be the exclusive responsibility of the bank/branch servicing the account\"</i>.\n     * This method implements the preferred algorithm described in http://en.wikipedia.org/wiki/International_Bank_Account_Number#Generating_IBAN_check_digits\n     *\n     * @method fromBban\n     * @param {String} bban the BBAN to convert to IBAN\n     * @returns {Iban} the IBAN object\n     */\n    static fromBban(bban) {\n        const countryCode = 'XE';\n        const remainder = mod9710(iso13616Prepare(countryCode + '00' + bban));\n        const checkDigit = ('0' + (98 - remainder)).slice(-2);\n        return new Iban(countryCode + checkDigit + bban);\n    }\n    /**\n     * Should be used to create IBAN object for given institution and identifier\n     *\n     * @method createIndirect\n     * @param {Object} options, required options are \"institution\" and \"identifier\"\n     * @return {Iban} the IBAN object\n     */\n    static createIndirect(options) {\n        return Iban.fromBban('ETH' + options.institution + options.identifier);\n    }\n    /**\n     * This method should be used to check if given string is valid iban object\n     *\n     * @method isValid\n     * @param {String} iban string\n     * @return {Boolean} true if it is valid IBAN\n     */\n    static isValid(iban) {\n        const i = new Iban(iban);\n        return i.isValid();\n    }\n    ;\n    /**\n     * Should be called to check if iban is correct\n     *\n     * @method isValid\n     * @returns {Boolean} true if it is, otherwise false\n     */\n    isValid() {\n        return /^XE[0-9]{2}(ETH[0-9A-Z]{13}|[0-9A-Z]{30,31})$/.test(this._iban) &&\n            mod9710(iso13616Prepare(this._iban)) === 1;\n    }\n    ;\n    /**\n     * Should be called to check if iban number is direct\n     *\n     * @method isDirect\n     * @returns {Boolean} true if it is, otherwise false\n     */\n    isDirect() {\n        return this._iban.length === 34 || this._iban.length === 35;\n    }\n    ;\n    /**\n     * Should be called to check if iban number if indirect\n     *\n     * @method isIndirect\n     * @returns {Boolean} true if it is, otherwise false\n     */\n    isIndirect() {\n        return this._iban.length === 20;\n    }\n    ;\n    /**\n     * Should be called to get iban checksum\n     * Uses the mod-97-10 checksumming protocol (ISO/IEC 7064:2003)\n     *\n     * @method checksum\n     * @returns {String} checksum\n     */\n    checksum() {\n        return this._iban.substr(2, 2);\n    }\n    ;\n    /**\n     * Should be called to get institution identifier\n     * eg. XREG\n     *\n     * @method institution\n     * @returns {String} institution identifier\n     */\n    institution() {\n        return this.isIndirect() ? this._iban.substr(7, 4) : '';\n    }\n    ;\n    /**\n     * Should be called to get client identifier within institution\n     * eg. GAVOFYORK\n     *\n     * @method client\n     * @returns {String} client identifier\n     */\n    client() {\n        return this.isIndirect() ? this._iban.substr(11) : '';\n    }\n    ;\n    /**\n     * Should be called to get client direct address\n     *\n     * @method toAddress\n     * @returns {String} ethereum address\n     */\n    toAddress() {\n        if (this.isDirect()) {\n            const base36 = this._iban.substr(4);\n            const asBn = new BigNumber(base36, 36);\n            return utils.toChecksumAddress(asBn.toString(16, 20));\n        }\n        return '';\n    }\n    ;\n    toString() {\n        return this._iban;\n    }\n    ;\n}\nmodule.exports = Iban;\n"]},"metadata":{},"sourceType":"script"}