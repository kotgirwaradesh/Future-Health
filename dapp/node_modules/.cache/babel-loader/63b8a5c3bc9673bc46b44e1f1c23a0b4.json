{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.toType = exports.TypeOutput = exports.bnToRlp = exports.bnToUnpaddedBuffer = exports.bnToHex = void 0;\n\nvar bn_js_1 = __importDefault(require(\"bn.js\"));\n\nvar ethjs_util_1 = require(\"ethjs-util\");\n\nvar bytes_1 = require(\"./bytes\");\n/**\n * Convert BN to 0x-prefixed hex string.\n */\n\n\nfunction bnToHex(value) {\n  return \"0x\" + value.toString(16);\n}\n\nexports.bnToHex = bnToHex;\n/**\n * Convert value from BN to an unpadded Buffer\n * (useful for RLP transport)\n * @param value value to convert\n */\n\nfunction bnToUnpaddedBuffer(value) {\n  // Using `bn.toArrayLike(Buffer)` instead of `bn.toBuffer()`\n  // for compatibility with browserify and similar tools\n  return bytes_1.unpadBuffer(value.toArrayLike(Buffer));\n}\n\nexports.bnToUnpaddedBuffer = bnToUnpaddedBuffer;\n/**\n * Deprecated alias for {@link bnToUnpaddedBuffer}\n * @deprecated\n */\n\nfunction bnToRlp(value) {\n  return bnToUnpaddedBuffer(value);\n}\n\nexports.bnToRlp = bnToRlp;\n/**\n * Type output options\n */\n\nvar TypeOutput;\n\n(function (TypeOutput) {\n  TypeOutput[TypeOutput[\"Number\"] = 0] = \"Number\";\n  TypeOutput[TypeOutput[\"BN\"] = 1] = \"BN\";\n  TypeOutput[TypeOutput[\"Buffer\"] = 2] = \"Buffer\";\n  TypeOutput[TypeOutput[\"PrefixedHexString\"] = 3] = \"PrefixedHexString\";\n})(TypeOutput = exports.TypeOutput || (exports.TypeOutput = {}));\n/**\n * Convert an input to a specified type\n * @param input value to convert\n * @param outputType type to output\n */\n\n\nfunction toType(input, outputType) {\n  if (typeof input === 'string' && !ethjs_util_1.isHexString(input)) {\n    throw new Error(\"A string must be provided with a 0x-prefix, given: \" + input);\n  } else if (typeof input === 'number' && !Number.isSafeInteger(input)) {\n    throw new Error('The provided number is greater than MAX_SAFE_INTEGER (please use an alternative input type)');\n  }\n\n  input = bytes_1.toBuffer(input);\n\n  if (outputType === TypeOutput.Buffer) {\n    return input;\n  } else if (outputType === TypeOutput.BN) {\n    return new bn_js_1.default(input);\n  } else if (outputType === TypeOutput.Number) {\n    var bn = new bn_js_1.default(input);\n    var max = new bn_js_1.default(Number.MAX_SAFE_INTEGER.toString());\n\n    if (bn.gt(max)) {\n      throw new Error('The provided number is greater than MAX_SAFE_INTEGER (please use an alternative output type)');\n    }\n\n    return bn.toNumber();\n  } else {\n    // outputType === TypeOutput.PrefixedHexString\n    return \"0x\" + input.toString('hex');\n  }\n}\n\nexports.toType = toType;","map":{"version":3,"sources":["../src/types.ts"],"names":[],"mappings":";;;;;;;;;;;;;AAAA,IAAA,OAAA,GAAA,eAAA,CAAA,OAAA,CAAA,OAAA,CAAA,CAAA;;AACA,IAAA,YAAA,GAAA,OAAA,CAAA,YAAA,CAAA;;AAEA,IAAA,OAAA,GAAA,OAAA,CAAA,SAAA,CAAA;AA8CA;;AAEG;;;AACH,SAAgB,OAAhB,CAAwB,KAAxB,EAAiC;AAC/B,SAAO,OAAK,KAAK,CAAC,QAAN,CAAe,EAAf,CAAZ;AACD;;AAFD,OAAA,CAAA,OAAA,GAAA,OAAA;AAIA;;;;AAIG;;AACH,SAAgB,kBAAhB,CAAmC,KAAnC,EAA4C;AAC1C;AACA;AACA,SAAO,OAAA,CAAA,WAAA,CAAY,KAAK,CAAC,WAAN,CAAkB,MAAlB,CAAZ,CAAP;AACD;;AAJD,OAAA,CAAA,kBAAA,GAAA,kBAAA;AAMA;;;AAGG;;AACH,SAAgB,OAAhB,CAAwB,KAAxB,EAAiC;AAC/B,SAAO,kBAAkB,CAAC,KAAD,CAAzB;AACD;;AAFD,OAAA,CAAA,OAAA,GAAA,OAAA;AAIA;;AAEG;;AACH,IAAY,UAAZ;;AAAA,CAAA,UAAY,UAAZ,EAAsB;AACpB,EAAA,UAAA,CAAA,UAAA,CAAA,QAAA,CAAA,GAAA,CAAA,CAAA,GAAA,QAAA;AACA,EAAA,UAAA,CAAA,UAAA,CAAA,IAAA,CAAA,GAAA,CAAA,CAAA,GAAA,IAAA;AACA,EAAA,UAAA,CAAA,UAAA,CAAA,QAAA,CAAA,GAAA,CAAA,CAAA,GAAA,QAAA;AACA,EAAA,UAAA,CAAA,UAAA,CAAA,mBAAA,CAAA,GAAA,CAAA,CAAA,GAAA,mBAAA;AACD,CALD,EAAY,UAAU,GAAV,OAAA,CAAA,UAAA,KAAA,OAAA,CAAA,UAAA,GAAU,EAAV,CAAZ;AAcA;;;;AAIG;;;AACH,SAAgB,MAAhB,CACE,KADF,EAEE,UAFF,EAEe;AAEb,MAAI,OAAO,KAAP,KAAiB,QAAjB,IAA6B,CAAC,YAAA,CAAA,WAAA,CAAY,KAAZ,CAAlC,EAAsD;AACpD,UAAM,IAAI,KAAJ,CAAU,wDAAsD,KAAhE,CAAN;AACD,GAFD,MAEO,IAAI,OAAO,KAAP,KAAiB,QAAjB,IAA6B,CAAC,MAAM,CAAC,aAAP,CAAqB,KAArB,CAAlC,EAA+D;AACpE,UAAM,IAAI,KAAJ,CACJ,6FADI,CAAN;AAGD;;AAED,EAAA,KAAK,GAAG,OAAA,CAAA,QAAA,CAAS,KAAT,CAAR;;AAEA,MAAI,UAAU,KAAK,UAAU,CAAC,MAA9B,EAAsC;AACpC,WAAO,KAAP;AACD,GAFD,MAEO,IAAI,UAAU,KAAK,UAAU,CAAC,EAA9B,EAAkC;AACvC,WAAO,IAAI,OAAA,CAAA,OAAJ,CAAO,KAAP,CAAP;AACD,GAFM,MAEA,IAAI,UAAU,KAAK,UAAU,CAAC,MAA9B,EAAsC;AAC3C,QAAM,EAAE,GAAG,IAAI,OAAA,CAAA,OAAJ,CAAO,KAAP,CAAX;AACA,QAAM,GAAG,GAAG,IAAI,OAAA,CAAA,OAAJ,CAAO,MAAM,CAAC,gBAAP,CAAwB,QAAxB,EAAP,CAAZ;;AACA,QAAI,EAAE,CAAC,EAAH,CAAM,GAAN,CAAJ,EAAgB;AACd,YAAM,IAAI,KAAJ,CACJ,8FADI,CAAN;AAGD;;AACD,WAAO,EAAE,CAAC,QAAH,EAAP;AACD,GATM,MASA;AACL;AACA,WAAO,OAAK,KAAK,CAAC,QAAN,CAAe,KAAf,CAAZ;AACD;AACF;;AA/BD,OAAA,CAAA,MAAA,GAAA,MAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.toType = exports.TypeOutput = exports.bnToRlp = exports.bnToUnpaddedBuffer = exports.bnToHex = void 0;\nvar bn_js_1 = __importDefault(require(\"bn.js\"));\nvar ethjs_util_1 = require(\"ethjs-util\");\nvar bytes_1 = require(\"./bytes\");\n/**\n * Convert BN to 0x-prefixed hex string.\n */\nfunction bnToHex(value) {\n    return \"0x\" + value.toString(16);\n}\nexports.bnToHex = bnToHex;\n/**\n * Convert value from BN to an unpadded Buffer\n * (useful for RLP transport)\n * @param value value to convert\n */\nfunction bnToUnpaddedBuffer(value) {\n    // Using `bn.toArrayLike(Buffer)` instead of `bn.toBuffer()`\n    // for compatibility with browserify and similar tools\n    return bytes_1.unpadBuffer(value.toArrayLike(Buffer));\n}\nexports.bnToUnpaddedBuffer = bnToUnpaddedBuffer;\n/**\n * Deprecated alias for {@link bnToUnpaddedBuffer}\n * @deprecated\n */\nfunction bnToRlp(value) {\n    return bnToUnpaddedBuffer(value);\n}\nexports.bnToRlp = bnToRlp;\n/**\n * Type output options\n */\nvar TypeOutput;\n(function (TypeOutput) {\n    TypeOutput[TypeOutput[\"Number\"] = 0] = \"Number\";\n    TypeOutput[TypeOutput[\"BN\"] = 1] = \"BN\";\n    TypeOutput[TypeOutput[\"Buffer\"] = 2] = \"Buffer\";\n    TypeOutput[TypeOutput[\"PrefixedHexString\"] = 3] = \"PrefixedHexString\";\n})(TypeOutput = exports.TypeOutput || (exports.TypeOutput = {}));\n/**\n * Convert an input to a specified type\n * @param input value to convert\n * @param outputType type to output\n */\nfunction toType(input, outputType) {\n    if (typeof input === 'string' && !ethjs_util_1.isHexString(input)) {\n        throw new Error(\"A string must be provided with a 0x-prefix, given: \" + input);\n    }\n    else if (typeof input === 'number' && !Number.isSafeInteger(input)) {\n        throw new Error('The provided number is greater than MAX_SAFE_INTEGER (please use an alternative input type)');\n    }\n    input = bytes_1.toBuffer(input);\n    if (outputType === TypeOutput.Buffer) {\n        return input;\n    }\n    else if (outputType === TypeOutput.BN) {\n        return new bn_js_1.default(input);\n    }\n    else if (outputType === TypeOutput.Number) {\n        var bn = new bn_js_1.default(input);\n        var max = new bn_js_1.default(Number.MAX_SAFE_INTEGER.toString());\n        if (bn.gt(max)) {\n            throw new Error('The provided number is greater than MAX_SAFE_INTEGER (please use an alternative output type)');\n        }\n        return bn.toNumber();\n    }\n    else {\n        // outputType === TypeOutput.PrefixedHexString\n        return \"0x\" + input.toString('hex');\n    }\n}\nexports.toType = toType;\n//# sourceMappingURL=types.js.map"]},"metadata":{},"sourceType":"script"}