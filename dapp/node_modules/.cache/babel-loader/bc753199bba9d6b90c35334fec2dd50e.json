{"ast":null,"code":"var BN = require(\"bn.js\");\n\nvar Bytes = require(\"./bytes\");\n\nvar fromBN = function fromBN(bn) {\n  return \"0x\" + bn.toString(\"hex\");\n};\n\nvar toBN = function toBN(str) {\n  return new BN(str.slice(2), 16);\n};\n\nvar fromString = function fromString(str) {\n  var bn = \"0x\" + (str.slice(0, 2) === \"0x\" ? new BN(str.slice(2), 16) : new BN(str, 10)).toString(\"hex\");\n  return bn === \"0x0\" ? \"0x\" : bn;\n};\n\nvar toEther = function toEther(wei) {\n  return toNumber(div(wei, fromString(\"10000000000\"))) / 100000000;\n};\n\nvar fromEther = function fromEther(eth) {\n  return mul(fromNumber(Math.floor(eth * 100000000)), fromString(\"10000000000\"));\n};\n\nvar toString = function toString(a) {\n  return toBN(a).toString(10);\n};\n\nvar fromNumber = function fromNumber(a) {\n  return typeof a === \"string\" ? /^0x/.test(a) ? a : \"0x\" + a : \"0x\" + new BN(a).toString(\"hex\");\n};\n\nvar toNumber = function toNumber(a) {\n  return toBN(a).toNumber();\n};\n\nvar toUint256 = function toUint256(a) {\n  return Bytes.pad(32, a);\n};\n\nvar bin = function bin(method) {\n  return function (a, b) {\n    return fromBN(toBN(a)[method](toBN(b)));\n  };\n};\n\nvar add = bin(\"add\");\nvar mul = bin(\"mul\");\nvar div = bin(\"div\");\nvar sub = bin(\"sub\");\nmodule.exports = {\n  toString: toString,\n  fromString: fromString,\n  toNumber: toNumber,\n  fromNumber: fromNumber,\n  toEther: toEther,\n  fromEther: fromEther,\n  toUint256: toUint256,\n  add: add,\n  mul: mul,\n  div: div,\n  sub: sub\n};","map":{"version":3,"sources":["C:/Users/kotgi/Desktop/Health-Chain/dapp/node_modules/web3-eth-accounts/node_modules/eth-lib/lib/nat.js"],"names":["BN","require","Bytes","fromBN","bn","toString","toBN","str","slice","fromString","toEther","wei","toNumber","div","fromEther","eth","mul","fromNumber","Math","floor","a","test","toUint256","pad","bin","method","b","add","sub","module","exports"],"mappings":"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","sourcesContent":["const BN = require(\"bn.js\");\nconst Bytes = require(\"./bytes\");\n\nconst fromBN = bn => \"0x\" + bn.toString(\"hex\");\n\nconst toBN = str => new BN(str.slice(2), 16);\n\nconst fromString = str => {\n  const bn = \"0x\" + (str.slice(0, 2) === \"0x\" ? new BN(str.slice(2), 16) : new BN(str, 10)).toString(\"hex\");\n  return bn === \"0x0\" ? \"0x\" : bn;\n};\n\nconst toEther = wei => toNumber(div(wei, fromString(\"10000000000\"))) / 100000000;\n\nconst fromEther = eth => mul(fromNumber(Math.floor(eth * 100000000)), fromString(\"10000000000\"));\n\nconst toString = a => toBN(a).toString(10);\n\nconst fromNumber = a => typeof a === \"string\" ? /^0x/.test(a) ? a : \"0x\" + a : \"0x\" + new BN(a).toString(\"hex\");\n\nconst toNumber = a => toBN(a).toNumber();\n\nconst toUint256 = a => Bytes.pad(32, a);\n\nconst bin = method => (a, b) => fromBN(toBN(a)[method](toBN(b)));\n\nconst add = bin(\"add\");\nconst mul = bin(\"mul\");\nconst div = bin(\"div\");\nconst sub = bin(\"sub\");\n\nmodule.exports = {\n  toString,\n  fromString,\n  toNumber,\n  fromNumber,\n  toEther,\n  fromEther,\n  toUint256,\n  add,\n  mul,\n  div,\n  sub\n};"]},"metadata":{},"sourceType":"script"}