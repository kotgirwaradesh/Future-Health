{"ast":null,"code":"'use strict';\n\nvar _createForOfIteratorHelper = require(\"C:/Users/kotgi/Desktop/Health-Chain/dapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createForOfIteratorHelper\");\n\nvar _require = require('buffer'),\n    Buffer = _require.Buffer;\n\nmodule.exports = function base16(alphabet) {\n  return {\n    encode: function encode(input) {\n      if (typeof input === 'string') {\n        return Buffer.from(input).toString('hex');\n      }\n\n      return input.toString('hex');\n    },\n    decode: function decode(input) {\n      var _iterator = _createForOfIteratorHelper(input),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var char = _step.value;\n\n          if (alphabet.indexOf(char) < 0) {\n            throw new Error('invalid base16 character');\n          }\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      return Buffer.from(input, 'hex');\n    }\n  };\n};","map":{"version":3,"sources":["C:/Users/kotgi/Desktop/Health-Chain/dapp/node_modules/multibase/src/base16.js"],"names":["require","Buffer","module","exports","base16","alphabet","encode","input","from","toString","decode","char","indexOf","Error"],"mappings":"AAAA;;;;AACA,eAAmBA,OAAO,CAAC,QAAD,CAA1B;AAAA,IAAQC,MAAR,YAAQA,MAAR;;AAEAC,MAAM,CAACC,OAAP,GAAiB,SAASC,MAAT,CAAiBC,QAAjB,EAA2B;AAC1C,SAAO;AACLC,IAAAA,MADK,kBACGC,KADH,EACU;AACb,UAAI,OAAOA,KAAP,KAAiB,QAArB,EAA+B;AAC7B,eAAON,MAAM,CAACO,IAAP,CAAYD,KAAZ,EAAmBE,QAAnB,CAA4B,KAA5B,CAAP;AACD;;AACD,aAAOF,KAAK,CAACE,QAAN,CAAe,KAAf,CAAP;AACD,KANI;AAOLC,IAAAA,MAPK,kBAOGH,KAPH,EAOU;AAAA,iDACMA,KADN;AAAA;;AAAA;AACb,4DAA0B;AAAA,cAAfI,IAAe;;AACxB,cAAIN,QAAQ,CAACO,OAAT,CAAiBD,IAAjB,IAAyB,CAA7B,EAAgC;AAC9B,kBAAM,IAAIE,KAAJ,CAAU,0BAAV,CAAN;AACD;AACF;AALY;AAAA;AAAA;AAAA;AAAA;;AAMb,aAAOZ,MAAM,CAACO,IAAP,CAAYD,KAAZ,EAAmB,KAAnB,CAAP;AACD;AAdI,GAAP;AAgBD,CAjBD","sourcesContent":["'use strict'\nconst { Buffer } = require('buffer')\n\nmodule.exports = function base16 (alphabet) {\n  return {\n    encode (input) {\n      if (typeof input === 'string') {\n        return Buffer.from(input).toString('hex')\n      }\n      return input.toString('hex')\n    },\n    decode (input) {\n      for (const char of input) {\n        if (alphabet.indexOf(char) < 0) {\n          throw new Error('invalid base16 character')\n        }\n      }\n      return Buffer.from(input, 'hex')\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"script"}