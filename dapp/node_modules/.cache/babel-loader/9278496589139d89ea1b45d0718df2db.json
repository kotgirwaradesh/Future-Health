{"ast":null,"code":"var generate = function generate(num, fn) {\n  var a = [];\n\n  for (var i = 0; i < num; ++i) {\n    a.push(fn(i));\n  }\n\n  return a;\n};\n\nvar replicate = function replicate(num, val) {\n  return generate(num, function () {\n    return val;\n  });\n};\n\nvar concat = function concat(a, b) {\n  return a.concat(b);\n};\n\nvar flatten = function flatten(a) {\n  var r = [];\n\n  for (var j = 0, J = a.length; j < J; ++j) {\n    for (var i = 0, I = a[j].length; i < I; ++i) {\n      r.push(a[j][i]);\n    }\n  }\n\n  return r;\n};\n\nvar chunksOf = function chunksOf(n, a) {\n  var b = [];\n\n  for (var i = 0, l = a.length; i < l; i += n) {\n    b.push(a.slice(i, i + n));\n  }\n\n  return b;\n};\n\nmodule.exports = {\n  generate: generate,\n  replicate: replicate,\n  concat: concat,\n  flatten: flatten,\n  chunksOf: chunksOf\n};","map":{"version":3,"sources":["C:/Users/kotgi/Desktop/Health-Chain/dapp/node_modules/web3-eth-accounts/node_modules/eth-lib/lib/array.js"],"names":["generate","num","fn","a","i","push","replicate","val","concat","b","flatten","r","j","J","length","I","chunksOf","n","l","slice","module","exports"],"mappings":"AAAA,IAAMA,QAAQ,GAAG,SAAXA,QAAW,CAACC,GAAD,EAAMC,EAAN,EAAa;AAC5B,MAAIC,CAAC,GAAG,EAAR;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,GAApB,EAAyB,EAAEG,CAA3B;AAA8BD,IAAAA,CAAC,CAACE,IAAF,CAAOH,EAAE,CAACE,CAAD,CAAT;AAA9B;;AACA,SAAOD,CAAP;AACD,CAJD;;AAMA,IAAMG,SAAS,GAAG,SAAZA,SAAY,CAACL,GAAD,EAAMM,GAAN;AAAA,SAAcP,QAAQ,CAACC,GAAD,EAAM;AAAA,WAAMM,GAAN;AAAA,GAAN,CAAtB;AAAA,CAAlB;;AAEA,IAAMC,MAAM,GAAG,SAATA,MAAS,CAACL,CAAD,EAAIM,CAAJ;AAAA,SAAUN,CAAC,CAACK,MAAF,CAASC,CAAT,CAAV;AAAA,CAAf;;AAEA,IAAMC,OAAO,GAAG,SAAVA,OAAU,CAAAP,CAAC,EAAI;AACnB,MAAIQ,CAAC,GAAG,EAAR;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAR,EAAWC,CAAC,GAAGV,CAAC,CAACW,MAAtB,EAA8BF,CAAC,GAAGC,CAAlC,EAAqC,EAAED,CAAvC;AAA0C,SAAK,IAAIR,CAAC,GAAG,CAAR,EAAWW,CAAC,GAAGZ,CAAC,CAACS,CAAD,CAAD,CAAKE,MAAzB,EAAiCV,CAAC,GAAGW,CAArC,EAAwC,EAAEX,CAA1C;AAA6CO,MAAAA,CAAC,CAACN,IAAF,CAAOF,CAAC,CAACS,CAAD,CAAD,CAAKR,CAAL,CAAP;AAA7C;AAA1C;;AACA,SAAOO,CAAP;AACD,CAJD;;AAMA,IAAMK,QAAQ,GAAG,SAAXA,QAAW,CAACC,CAAD,EAAId,CAAJ,EAAU;AACzB,MAAIM,CAAC,GAAG,EAAR;;AACA,OAAK,IAAIL,CAAC,GAAG,CAAR,EAAWc,CAAC,GAAGf,CAAC,CAACW,MAAtB,EAA8BV,CAAC,GAAGc,CAAlC,EAAqCd,CAAC,IAAIa,CAA1C;AAA6CR,IAAAA,CAAC,CAACJ,IAAF,CAAOF,CAAC,CAACgB,KAAF,CAAQf,CAAR,EAAWA,CAAC,GAAGa,CAAf,CAAP;AAA7C;;AACA,SAAOR,CAAP;AACD,CAJD;;AAMAW,MAAM,CAACC,OAAP,GAAiB;AACfrB,EAAAA,QAAQ,EAARA,QADe;AAEfM,EAAAA,SAAS,EAATA,SAFe;AAGfE,EAAAA,MAAM,EAANA,MAHe;AAIfE,EAAAA,OAAO,EAAPA,OAJe;AAKfM,EAAAA,QAAQ,EAARA;AALe,CAAjB","sourcesContent":["const generate = (num, fn) => {\n  let a = [];\n  for (var i = 0; i < num; ++i) a.push(fn(i));\n  return a;\n};\n\nconst replicate = (num, val) => generate(num, () => val);\n\nconst concat = (a, b) => a.concat(b);\n\nconst flatten = a => {\n  let r = [];\n  for (let j = 0, J = a.length; j < J; ++j) for (let i = 0, I = a[j].length; i < I; ++i) r.push(a[j][i]);\n  return r;\n};\n\nconst chunksOf = (n, a) => {\n  let b = [];\n  for (let i = 0, l = a.length; i < l; i += n) b.push(a.slice(i, i + n));\n  return b;\n};\n\nmodule.exports = {\n  generate,\n  replicate,\n  concat,\n  flatten,\n  chunksOf\n};"]},"metadata":{},"sourceType":"script"}