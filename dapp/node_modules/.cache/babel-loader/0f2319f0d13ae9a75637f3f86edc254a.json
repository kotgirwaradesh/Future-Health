{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n      r,\n      ar = [],\n      e;\n\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) {\n      ar.push(r.value);\n    }\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n\n  return ar;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar ethereumjs_util_1 = require(\"ethereumjs-util\");\n\nvar types_1 = require(\"./types\");\n\nvar baseTransaction_1 = require(\"./baseTransaction\");\n\nvar TRANSACTION_TYPE = 0;\n/**\n * An Ethereum non-typed (legacy) transaction\n */\n\nvar Transaction = function (_super) {\n  __extends(Transaction, _super);\n  /**\n   * This constructor takes the values, validates them, assigns them and freezes the object.\n   *\n   * It is not recommended to use this constructor directly. Instead use\n   * the static factory methods to assist in creating a Transaction object from\n   * varying data types.\n   */\n\n\n  function Transaction(txData, opts) {\n    if (opts === void 0) {\n      opts = {};\n    }\n\n    var _a;\n\n    var _this = _super.call(this, __assign(__assign({}, txData), {\n      type: TRANSACTION_TYPE\n    })) || this;\n\n    _this.common = _this._validateTxV(_this.v, opts.common);\n    _this.gasPrice = new ethereumjs_util_1.BN(ethereumjs_util_1.toBuffer(txData.gasPrice === '' ? '0x' : txData.gasPrice));\n\n    _this._validateCannotExceedMaxInteger({\n      gasPrice: _this.gasPrice\n    });\n\n    if (_this.common.gteHardfork('spuriousDragon')) {\n      if (!_this.isSigned()) {\n        _this.activeCapabilities.push(types_1.Capability.EIP155ReplayProtection);\n      } else {\n        // EIP155 spec:\n        // If block.number >= 2,675,000 and v = CHAIN_ID * 2 + 35 or v = CHAIN_ID * 2 + 36\n        // then when computing the hash of a transaction for purposes of signing or recovering\n        // instead of hashing only the first six elements (i.e. nonce, gasprice, startgas, to, value, data)\n        // hash nine elements, with v replaced by CHAIN_ID, r = 0 and s = 0.\n        var v = _this.v;\n\n        var chainIdDoubled = _this.common.chainIdBN().muln(2); // v and chain ID meet EIP-155 conditions\n\n\n        if (v.eq(chainIdDoubled.addn(35)) || v.eq(chainIdDoubled.addn(36))) {\n          _this.activeCapabilities.push(types_1.Capability.EIP155ReplayProtection);\n        }\n      }\n    }\n\n    var freeze = (_a = opts === null || opts === void 0 ? void 0 : opts.freeze) !== null && _a !== void 0 ? _a : true;\n\n    if (freeze) {\n      Object.freeze(_this);\n    }\n\n    return _this;\n  }\n  /**\n   * Instantiate a transaction from a data dictionary.\n   *\n   * Format: { nonce, gasPrice, gasLimit, to, value, data, v, r, s }\n   *\n   * Notes:\n   * - All parameters are optional and have some basic default values\n   */\n\n\n  Transaction.fromTxData = function (txData, opts) {\n    if (opts === void 0) {\n      opts = {};\n    }\n\n    return new Transaction(txData, opts);\n  };\n  /**\n   * Instantiate a transaction from the serialized tx.\n   *\n   * Format: `rlp([nonce, gasPrice, gasLimit, to, value, data, v, r, s])`\n   */\n\n\n  Transaction.fromSerializedTx = function (serialized, opts) {\n    if (opts === void 0) {\n      opts = {};\n    }\n\n    var values = ethereumjs_util_1.rlp.decode(serialized);\n\n    if (!Array.isArray(values)) {\n      throw new Error('Invalid serialized tx input. Must be array');\n    }\n\n    return this.fromValuesArray(values, opts);\n  };\n  /**\n   * Instantiate a transaction from the serialized tx.\n   * (alias of {@link Transaction.fromSerializedTx})\n   *\n   * @deprecated this constructor alias is deprecated and will be removed\n   * in favor of the {@link Transaction.fromSerializedTx} constructor\n   */\n\n\n  Transaction.fromRlpSerializedTx = function (serialized, opts) {\n    if (opts === void 0) {\n      opts = {};\n    }\n\n    return Transaction.fromSerializedTx(serialized, opts);\n  };\n  /**\n   * Create a transaction from a values array.\n   *\n   * Format: `[nonce, gasPrice, gasLimit, to, value, data, v, r, s]`\n   */\n\n\n  Transaction.fromValuesArray = function (values, opts) {\n    if (opts === void 0) {\n      opts = {};\n    } // If length is not 6, it has length 9. If v/r/s are empty Buffers, it is still an unsigned transaction\n    // This happens if you get the RLP data from `raw()`\n\n\n    if (values.length !== 6 && values.length !== 9) {\n      throw new Error('Invalid transaction. Only expecting 6 values (for unsigned tx) or 9 values (for signed tx).');\n    }\n\n    var _a = __read(values, 9),\n        nonce = _a[0],\n        gasPrice = _a[1],\n        gasLimit = _a[2],\n        to = _a[3],\n        value = _a[4],\n        data = _a[5],\n        v = _a[6],\n        r = _a[7],\n        s = _a[8];\n\n    return new Transaction({\n      nonce: nonce,\n      gasPrice: gasPrice,\n      gasLimit: gasLimit,\n      to: to,\n      value: value,\n      data: data,\n      v: v,\n      r: r,\n      s: s\n    }, opts);\n  };\n  /**\n   * Returns a Buffer Array of the raw Buffers of the legacy transaction, in order.\n   *\n   * Format: `[nonce, gasPrice, gasLimit, to, value, data, v, r, s]`\n   *\n   * For an unsigned legacy tx this method returns the the empty Buffer values\n   * for the signature parameters `v`, `r` and `s`. For an EIP-155 compliant\n   * representation have a look at {@link Transaction.getMessageToSign}.\n   */\n\n\n  Transaction.prototype.raw = function () {\n    return [ethereumjs_util_1.bnToUnpaddedBuffer(this.nonce), ethereumjs_util_1.bnToUnpaddedBuffer(this.gasPrice), ethereumjs_util_1.bnToUnpaddedBuffer(this.gasLimit), this.to !== undefined ? this.to.buf : Buffer.from([]), ethereumjs_util_1.bnToUnpaddedBuffer(this.value), this.data, this.v !== undefined ? ethereumjs_util_1.bnToUnpaddedBuffer(this.v) : Buffer.from([]), this.r !== undefined ? ethereumjs_util_1.bnToUnpaddedBuffer(this.r) : Buffer.from([]), this.s !== undefined ? ethereumjs_util_1.bnToUnpaddedBuffer(this.s) : Buffer.from([])];\n  };\n  /**\n   * Returns the serialized encoding of the legacy transaction.\n   *\n   * Format: `rlp([nonce, gasPrice, gasLimit, to, value, data, v, r, s])`\n   *\n   * For an unsigned legacy tx this method uses the empty Buffer values\n   * for the signature parameters `v`, `r` and `s` for encoding. For an\n   * EIP-155 compliant representation use {@link Transaction.getMessageToSign}.\n   */\n\n\n  Transaction.prototype.serialize = function () {\n    return ethereumjs_util_1.rlp.encode(this.raw());\n  };\n\n  Transaction.prototype._getMessageToSign = function () {\n    var values = [ethereumjs_util_1.bnToUnpaddedBuffer(this.nonce), ethereumjs_util_1.bnToUnpaddedBuffer(this.gasPrice), ethereumjs_util_1.bnToUnpaddedBuffer(this.gasLimit), this.to !== undefined ? this.to.buf : Buffer.from([]), ethereumjs_util_1.bnToUnpaddedBuffer(this.value), this.data];\n\n    if (this.supports(types_1.Capability.EIP155ReplayProtection)) {\n      values.push(ethereumjs_util_1.toBuffer(this.common.chainIdBN()));\n      values.push(ethereumjs_util_1.unpadBuffer(ethereumjs_util_1.toBuffer(0)));\n      values.push(ethereumjs_util_1.unpadBuffer(ethereumjs_util_1.toBuffer(0)));\n    }\n\n    return values;\n  };\n\n  Transaction.prototype.getMessageToSign = function (hashMessage) {\n    if (hashMessage === void 0) {\n      hashMessage = true;\n    }\n\n    var message = this._getMessageToSign();\n\n    if (hashMessage) {\n      return ethereumjs_util_1.rlphash(message);\n    } else {\n      return message;\n    }\n  };\n  /**\n   * The up front amount that an account must have for this transaction to be valid\n   */\n\n\n  Transaction.prototype.getUpfrontCost = function () {\n    return this.gasLimit.mul(this.gasPrice).add(this.value);\n  };\n  /**\n   * Computes a sha3-256 hash of the serialized tx.\n   *\n   * This method can only be used for signed txs (it throws otherwise).\n   * Use {@link Transaction.getMessageToSign} to get a tx hash for the purpose of signing.\n   */\n\n\n  Transaction.prototype.hash = function () {\n    return ethereumjs_util_1.rlphash(this.raw());\n  };\n  /**\n   * Computes a sha3-256 hash which can be used to verify the signature\n   */\n\n\n  Transaction.prototype.getMessageToVerifySignature = function () {\n    if (!this.isSigned()) {\n      throw Error('This transaction is not signed');\n    }\n\n    var message = this._getMessageToSign();\n\n    return ethereumjs_util_1.rlphash(message);\n  };\n  /**\n   * Returns the public key of the sender\n   */\n\n\n  Transaction.prototype.getSenderPublicKey = function () {\n    var _a;\n\n    var msgHash = this.getMessageToVerifySignature(); // EIP-2: All transaction signatures whose s-value is greater than secp256k1n/2 are considered invalid.\n    // Reasoning: https://ethereum.stackexchange.com/a/55728\n\n    if (this.common.gteHardfork('homestead') && ((_a = this.s) === null || _a === void 0 ? void 0 : _a.gt(types_1.N_DIV_2))) {\n      throw new Error('Invalid Signature: s-values greater than secp256k1n/2 are considered invalid');\n    }\n\n    var _b = this,\n        v = _b.v,\n        r = _b.r,\n        s = _b.s;\n\n    try {\n      return ethereumjs_util_1.ecrecover(msgHash, v, ethereumjs_util_1.bnToUnpaddedBuffer(r), ethereumjs_util_1.bnToUnpaddedBuffer(s), this.supports(types_1.Capability.EIP155ReplayProtection) ? this.common.chainIdBN() : undefined);\n    } catch (e) {\n      throw new Error('Invalid Signature');\n    }\n  };\n  /**\n   * Process the v, r, s values from the `sign` method of the base transaction.\n   */\n\n\n  Transaction.prototype._processSignature = function (v, r, s) {\n    var vBN = new ethereumjs_util_1.BN(v);\n\n    if (this.supports(types_1.Capability.EIP155ReplayProtection)) {\n      vBN.iadd(this.common.chainIdBN().muln(2).addn(8));\n    }\n\n    var opts = {\n      common: this.common\n    };\n    return Transaction.fromTxData({\n      nonce: this.nonce,\n      gasPrice: this.gasPrice,\n      gasLimit: this.gasLimit,\n      to: this.to,\n      value: this.value,\n      data: this.data,\n      v: vBN,\n      r: new ethereumjs_util_1.BN(r),\n      s: new ethereumjs_util_1.BN(s)\n    }, opts);\n  };\n  /**\n   * Returns an object with the JSON representation of the transaction.\n   */\n\n\n  Transaction.prototype.toJSON = function () {\n    return {\n      nonce: ethereumjs_util_1.bnToHex(this.nonce),\n      gasPrice: ethereumjs_util_1.bnToHex(this.gasPrice),\n      gasLimit: ethereumjs_util_1.bnToHex(this.gasLimit),\n      to: this.to !== undefined ? this.to.toString() : undefined,\n      value: ethereumjs_util_1.bnToHex(this.value),\n      data: '0x' + this.data.toString('hex'),\n      v: this.v !== undefined ? ethereumjs_util_1.bnToHex(this.v) : undefined,\n      r: this.r !== undefined ? ethereumjs_util_1.bnToHex(this.r) : undefined,\n      s: this.s !== undefined ? ethereumjs_util_1.bnToHex(this.s) : undefined\n    };\n  };\n  /**\n   * Validates tx's `v` value\n   */\n\n\n  Transaction.prototype._validateTxV = function (v, common) {\n    var chainIdBN; // No unsigned tx and EIP-155 activated and chain ID included\n\n    if (v !== undefined && !v.eqn(0) && (!common || common.gteHardfork('spuriousDragon')) && !v.eqn(27) && !v.eqn(28)) {\n      if (common) {\n        var chainIdDoubled = common.chainIdBN().muln(2);\n        var isValidEIP155V = v.eq(chainIdDoubled.addn(35)) || v.eq(chainIdDoubled.addn(36));\n\n        if (!isValidEIP155V) {\n          throw new Error(\"Incompatible EIP155-based V \" + v.toString() + \" and chain id \" + common.chainIdBN().toString() + \". See the Common parameter of the Transaction constructor to set the chain id.\");\n        }\n      } else {\n        // Derive the original chain ID\n        var numSub = void 0;\n\n        if (v.subn(35).isEven()) {\n          numSub = 35;\n        } else {\n          numSub = 36;\n        } // Use derived chain ID to create a proper Common\n\n\n        chainIdBN = v.subn(numSub).divn(2);\n      }\n    }\n\n    return this._getCommon(common, chainIdBN);\n  };\n  /**\n   * @deprecated if you have called this internal method please use `tx.supports(Capabilities.EIP155ReplayProtection)` instead\n   */\n\n\n  Transaction.prototype._unsignedTxImplementsEIP155 = function () {\n    return this.common.gteHardfork('spuriousDragon');\n  };\n  /**\n   * @deprecated if you have called this internal method please use `tx.supports(Capabilities.EIP155ReplayProtection)` instead\n   */\n\n\n  Transaction.prototype._signedTxImplementsEIP155 = function () {\n    if (!this.isSigned()) {\n      throw Error('This transaction is not signed');\n    }\n\n    var onEIP155BlockOrLater = this.common.gteHardfork('spuriousDragon'); // EIP155 spec:\n    // If block.number >= 2,675,000 and v = CHAIN_ID * 2 + 35 or v = CHAIN_ID * 2 + 36, then when computing the hash of a transaction for purposes of signing or recovering, instead of hashing only the first six elements (i.e. nonce, gasprice, startgas, to, value, data), hash nine elements, with v replaced by CHAIN_ID, r = 0 and s = 0.\n\n    var v = this.v;\n    var chainIdDoubled = this.common.chainIdBN().muln(2);\n    var vAndChainIdMeetEIP155Conditions = v.eq(chainIdDoubled.addn(35)) || v.eq(chainIdDoubled.addn(36));\n    return vAndChainIdMeetEIP155Conditions && onEIP155BlockOrLater;\n  };\n\n  return Transaction;\n}(baseTransaction_1.BaseTransaction);\n\nexports.default = Transaction;","map":{"version":3,"sources":["../src/legacyTransaction.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __read = (this && this.__read) || function (o, n) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n    if (!m) return o;\n    var i = m.call(o), r, ar = [], e;\n    try {\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n    }\n    catch (error) { e = { error: error }; }\n    finally {\n        try {\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\n        }\n        finally { if (e) throw e.error; }\n    }\n    return ar;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar ethereumjs_util_1 = require(\"ethereumjs-util\");\nvar types_1 = require(\"./types\");\nvar baseTransaction_1 = require(\"./baseTransaction\");\nvar TRANSACTION_TYPE = 0;\n/**\n * An Ethereum non-typed (legacy) transaction\n */\nvar Transaction = /** @class */ (function (_super) {\n    __extends(Transaction, _super);\n    /**\n     * This constructor takes the values, validates them, assigns them and freezes the object.\n     *\n     * It is not recommended to use this constructor directly. Instead use\n     * the static factory methods to assist in creating a Transaction object from\n     * varying data types.\n     */\n    function Transaction(txData, opts) {\n        if (opts === void 0) { opts = {}; }\n        var _a;\n        var _this = _super.call(this, __assign(__assign({}, txData), { type: TRANSACTION_TYPE })) || this;\n        _this.common = _this._validateTxV(_this.v, opts.common);\n        _this.gasPrice = new ethereumjs_util_1.BN(ethereumjs_util_1.toBuffer(txData.gasPrice === '' ? '0x' : txData.gasPrice));\n        _this._validateCannotExceedMaxInteger({ gasPrice: _this.gasPrice });\n        if (_this.common.gteHardfork('spuriousDragon')) {\n            if (!_this.isSigned()) {\n                _this.activeCapabilities.push(types_1.Capability.EIP155ReplayProtection);\n            }\n            else {\n                // EIP155 spec:\n                // If block.number >= 2,675,000 and v = CHAIN_ID * 2 + 35 or v = CHAIN_ID * 2 + 36\n                // then when computing the hash of a transaction for purposes of signing or recovering\n                // instead of hashing only the first six elements (i.e. nonce, gasprice, startgas, to, value, data)\n                // hash nine elements, with v replaced by CHAIN_ID, r = 0 and s = 0.\n                var v = _this.v;\n                var chainIdDoubled = _this.common.chainIdBN().muln(2);\n                // v and chain ID meet EIP-155 conditions\n                if (v.eq(chainIdDoubled.addn(35)) || v.eq(chainIdDoubled.addn(36))) {\n                    _this.activeCapabilities.push(types_1.Capability.EIP155ReplayProtection);\n                }\n            }\n        }\n        var freeze = (_a = opts === null || opts === void 0 ? void 0 : opts.freeze) !== null && _a !== void 0 ? _a : true;\n        if (freeze) {\n            Object.freeze(_this);\n        }\n        return _this;\n    }\n    /**\n     * Instantiate a transaction from a data dictionary.\n     *\n     * Format: { nonce, gasPrice, gasLimit, to, value, data, v, r, s }\n     *\n     * Notes:\n     * - All parameters are optional and have some basic default values\n     */\n    Transaction.fromTxData = function (txData, opts) {\n        if (opts === void 0) { opts = {}; }\n        return new Transaction(txData, opts);\n    };\n    /**\n     * Instantiate a transaction from the serialized tx.\n     *\n     * Format: `rlp([nonce, gasPrice, gasLimit, to, value, data, v, r, s])`\n     */\n    Transaction.fromSerializedTx = function (serialized, opts) {\n        if (opts === void 0) { opts = {}; }\n        var values = ethereumjs_util_1.rlp.decode(serialized);\n        if (!Array.isArray(values)) {\n            throw new Error('Invalid serialized tx input. Must be array');\n        }\n        return this.fromValuesArray(values, opts);\n    };\n    /**\n     * Instantiate a transaction from the serialized tx.\n     * (alias of {@link Transaction.fromSerializedTx})\n     *\n     * @deprecated this constructor alias is deprecated and will be removed\n     * in favor of the {@link Transaction.fromSerializedTx} constructor\n     */\n    Transaction.fromRlpSerializedTx = function (serialized, opts) {\n        if (opts === void 0) { opts = {}; }\n        return Transaction.fromSerializedTx(serialized, opts);\n    };\n    /**\n     * Create a transaction from a values array.\n     *\n     * Format: `[nonce, gasPrice, gasLimit, to, value, data, v, r, s]`\n     */\n    Transaction.fromValuesArray = function (values, opts) {\n        if (opts === void 0) { opts = {}; }\n        // If length is not 6, it has length 9. If v/r/s are empty Buffers, it is still an unsigned transaction\n        // This happens if you get the RLP data from `raw()`\n        if (values.length !== 6 && values.length !== 9) {\n            throw new Error('Invalid transaction. Only expecting 6 values (for unsigned tx) or 9 values (for signed tx).');\n        }\n        var _a = __read(values, 9), nonce = _a[0], gasPrice = _a[1], gasLimit = _a[2], to = _a[3], value = _a[4], data = _a[5], v = _a[6], r = _a[7], s = _a[8];\n        return new Transaction({\n            nonce: nonce,\n            gasPrice: gasPrice,\n            gasLimit: gasLimit,\n            to: to,\n            value: value,\n            data: data,\n            v: v,\n            r: r,\n            s: s,\n        }, opts);\n    };\n    /**\n     * Returns a Buffer Array of the raw Buffers of the legacy transaction, in order.\n     *\n     * Format: `[nonce, gasPrice, gasLimit, to, value, data, v, r, s]`\n     *\n     * For an unsigned legacy tx this method returns the the empty Buffer values\n     * for the signature parameters `v`, `r` and `s`. For an EIP-155 compliant\n     * representation have a look at {@link Transaction.getMessageToSign}.\n     */\n    Transaction.prototype.raw = function () {\n        return [\n            ethereumjs_util_1.bnToUnpaddedBuffer(this.nonce),\n            ethereumjs_util_1.bnToUnpaddedBuffer(this.gasPrice),\n            ethereumjs_util_1.bnToUnpaddedBuffer(this.gasLimit),\n            this.to !== undefined ? this.to.buf : Buffer.from([]),\n            ethereumjs_util_1.bnToUnpaddedBuffer(this.value),\n            this.data,\n            this.v !== undefined ? ethereumjs_util_1.bnToUnpaddedBuffer(this.v) : Buffer.from([]),\n            this.r !== undefined ? ethereumjs_util_1.bnToUnpaddedBuffer(this.r) : Buffer.from([]),\n            this.s !== undefined ? ethereumjs_util_1.bnToUnpaddedBuffer(this.s) : Buffer.from([]),\n        ];\n    };\n    /**\n     * Returns the serialized encoding of the legacy transaction.\n     *\n     * Format: `rlp([nonce, gasPrice, gasLimit, to, value, data, v, r, s])`\n     *\n     * For an unsigned legacy tx this method uses the empty Buffer values\n     * for the signature parameters `v`, `r` and `s` for encoding. For an\n     * EIP-155 compliant representation use {@link Transaction.getMessageToSign}.\n     */\n    Transaction.prototype.serialize = function () {\n        return ethereumjs_util_1.rlp.encode(this.raw());\n    };\n    Transaction.prototype._getMessageToSign = function () {\n        var values = [\n            ethereumjs_util_1.bnToUnpaddedBuffer(this.nonce),\n            ethereumjs_util_1.bnToUnpaddedBuffer(this.gasPrice),\n            ethereumjs_util_1.bnToUnpaddedBuffer(this.gasLimit),\n            this.to !== undefined ? this.to.buf : Buffer.from([]),\n            ethereumjs_util_1.bnToUnpaddedBuffer(this.value),\n            this.data,\n        ];\n        if (this.supports(types_1.Capability.EIP155ReplayProtection)) {\n            values.push(ethereumjs_util_1.toBuffer(this.common.chainIdBN()));\n            values.push(ethereumjs_util_1.unpadBuffer(ethereumjs_util_1.toBuffer(0)));\n            values.push(ethereumjs_util_1.unpadBuffer(ethereumjs_util_1.toBuffer(0)));\n        }\n        return values;\n    };\n    Transaction.prototype.getMessageToSign = function (hashMessage) {\n        if (hashMessage === void 0) { hashMessage = true; }\n        var message = this._getMessageToSign();\n        if (hashMessage) {\n            return ethereumjs_util_1.rlphash(message);\n        }\n        else {\n            return message;\n        }\n    };\n    /**\n     * The up front amount that an account must have for this transaction to be valid\n     */\n    Transaction.prototype.getUpfrontCost = function () {\n        return this.gasLimit.mul(this.gasPrice).add(this.value);\n    };\n    /**\n     * Computes a sha3-256 hash of the serialized tx.\n     *\n     * This method can only be used for signed txs (it throws otherwise).\n     * Use {@link Transaction.getMessageToSign} to get a tx hash for the purpose of signing.\n     */\n    Transaction.prototype.hash = function () {\n        return ethereumjs_util_1.rlphash(this.raw());\n    };\n    /**\n     * Computes a sha3-256 hash which can be used to verify the signature\n     */\n    Transaction.prototype.getMessageToVerifySignature = function () {\n        if (!this.isSigned()) {\n            throw Error('This transaction is not signed');\n        }\n        var message = this._getMessageToSign();\n        return ethereumjs_util_1.rlphash(message);\n    };\n    /**\n     * Returns the public key of the sender\n     */\n    Transaction.prototype.getSenderPublicKey = function () {\n        var _a;\n        var msgHash = this.getMessageToVerifySignature();\n        // EIP-2: All transaction signatures whose s-value is greater than secp256k1n/2 are considered invalid.\n        // Reasoning: https://ethereum.stackexchange.com/a/55728\n        if (this.common.gteHardfork('homestead') && ((_a = this.s) === null || _a === void 0 ? void 0 : _a.gt(types_1.N_DIV_2))) {\n            throw new Error('Invalid Signature: s-values greater than secp256k1n/2 are considered invalid');\n        }\n        var _b = this, v = _b.v, r = _b.r, s = _b.s;\n        try {\n            return ethereumjs_util_1.ecrecover(msgHash, v, ethereumjs_util_1.bnToUnpaddedBuffer(r), ethereumjs_util_1.bnToUnpaddedBuffer(s), this.supports(types_1.Capability.EIP155ReplayProtection) ? this.common.chainIdBN() : undefined);\n        }\n        catch (e) {\n            throw new Error('Invalid Signature');\n        }\n    };\n    /**\n     * Process the v, r, s values from the `sign` method of the base transaction.\n     */\n    Transaction.prototype._processSignature = function (v, r, s) {\n        var vBN = new ethereumjs_util_1.BN(v);\n        if (this.supports(types_1.Capability.EIP155ReplayProtection)) {\n            vBN.iadd(this.common.chainIdBN().muln(2).addn(8));\n        }\n        var opts = {\n            common: this.common,\n        };\n        return Transaction.fromTxData({\n            nonce: this.nonce,\n            gasPrice: this.gasPrice,\n            gasLimit: this.gasLimit,\n            to: this.to,\n            value: this.value,\n            data: this.data,\n            v: vBN,\n            r: new ethereumjs_util_1.BN(r),\n            s: new ethereumjs_util_1.BN(s),\n        }, opts);\n    };\n    /**\n     * Returns an object with the JSON representation of the transaction.\n     */\n    Transaction.prototype.toJSON = function () {\n        return {\n            nonce: ethereumjs_util_1.bnToHex(this.nonce),\n            gasPrice: ethereumjs_util_1.bnToHex(this.gasPrice),\n            gasLimit: ethereumjs_util_1.bnToHex(this.gasLimit),\n            to: this.to !== undefined ? this.to.toString() : undefined,\n            value: ethereumjs_util_1.bnToHex(this.value),\n            data: '0x' + this.data.toString('hex'),\n            v: this.v !== undefined ? ethereumjs_util_1.bnToHex(this.v) : undefined,\n            r: this.r !== undefined ? ethereumjs_util_1.bnToHex(this.r) : undefined,\n            s: this.s !== undefined ? ethereumjs_util_1.bnToHex(this.s) : undefined,\n        };\n    };\n    /**\n     * Validates tx's `v` value\n     */\n    Transaction.prototype._validateTxV = function (v, common) {\n        var chainIdBN;\n        // No unsigned tx and EIP-155 activated and chain ID included\n        if (v !== undefined &&\n            !v.eqn(0) &&\n            (!common || common.gteHardfork('spuriousDragon')) &&\n            !v.eqn(27) &&\n            !v.eqn(28)) {\n            if (common) {\n                var chainIdDoubled = common.chainIdBN().muln(2);\n                var isValidEIP155V = v.eq(chainIdDoubled.addn(35)) || v.eq(chainIdDoubled.addn(36));\n                if (!isValidEIP155V) {\n                    throw new Error(\"Incompatible EIP155-based V \" + v.toString() + \" and chain id \" + common\n                        .chainIdBN()\n                        .toString() + \". See the Common parameter of the Transaction constructor to set the chain id.\");\n                }\n            }\n            else {\n                // Derive the original chain ID\n                var numSub = void 0;\n                if (v.subn(35).isEven()) {\n                    numSub = 35;\n                }\n                else {\n                    numSub = 36;\n                }\n                // Use derived chain ID to create a proper Common\n                chainIdBN = v.subn(numSub).divn(2);\n            }\n        }\n        return this._getCommon(common, chainIdBN);\n    };\n    /**\n     * @deprecated if you have called this internal method please use `tx.supports(Capabilities.EIP155ReplayProtection)` instead\n     */\n    Transaction.prototype._unsignedTxImplementsEIP155 = function () {\n        return this.common.gteHardfork('spuriousDragon');\n    };\n    /**\n     * @deprecated if you have called this internal method please use `tx.supports(Capabilities.EIP155ReplayProtection)` instead\n     */\n    Transaction.prototype._signedTxImplementsEIP155 = function () {\n        if (!this.isSigned()) {\n            throw Error('This transaction is not signed');\n        }\n        var onEIP155BlockOrLater = this.common.gteHardfork('spuriousDragon');\n        // EIP155 spec:\n        // If block.number >= 2,675,000 and v = CHAIN_ID * 2 + 35 or v = CHAIN_ID * 2 + 36, then when computing the hash of a transaction for purposes of signing or recovering, instead of hashing only the first six elements (i.e. nonce, gasprice, startgas, to, value, data), hash nine elements, with v replaced by CHAIN_ID, r = 0 and s = 0.\n        var v = this.v;\n        var chainIdDoubled = this.common.chainIdBN().muln(2);\n        var vAndChainIdMeetEIP155Conditions = v.eq(chainIdDoubled.addn(35)) || v.eq(chainIdDoubled.addn(36));\n        return vAndChainIdMeetEIP155Conditions && onEIP155BlockOrLater;\n    };\n    return Transaction;\n}(baseTransaction_1.BaseTransaction));\nexports.default = Transaction;\n//# sourceMappingURL=legacyTransaction.js.map"]},"metadata":{},"sourceType":"script"}