{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"C:/Users/kotgi/Desktop/Health-Chain/dapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:/Users/kotgi/Desktop/Health-Chain/dapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar Base = /*#__PURE__*/function () {\n  function Base(name, code, implementation, alphabet) {\n    _classCallCheck(this, Base);\n\n    this.name = name;\n    this.code = code;\n    this.alphabet = alphabet;\n\n    if (implementation && alphabet) {\n      this.engine = implementation(alphabet);\n    }\n  }\n\n  _createClass(Base, [{\n    key: \"encode\",\n    value: function encode(stringOrBuffer) {\n      return this.engine.encode(stringOrBuffer);\n    }\n  }, {\n    key: \"decode\",\n    value: function decode(stringOrBuffer) {\n      return this.engine.decode(stringOrBuffer);\n    }\n  }, {\n    key: \"isImplemented\",\n    value: function isImplemented() {\n      return this.engine;\n    }\n  }]);\n\n  return Base;\n}();\n\nmodule.exports = Base;","map":{"version":3,"sources":["C:/Users/kotgi/Desktop/Health-Chain/dapp/node_modules/multibase/src/base.js"],"names":["Base","name","code","implementation","alphabet","engine","stringOrBuffer","encode","decode","module","exports"],"mappings":"AAAA;;;;;;IAEMA,I;AACJ,gBAAaC,IAAb,EAAmBC,IAAnB,EAAyBC,cAAzB,EAAyCC,QAAzC,EAAmD;AAAA;;AACjD,SAAKH,IAAL,GAAYA,IAAZ;AACA,SAAKC,IAAL,GAAYA,IAAZ;AACA,SAAKE,QAAL,GAAgBA,QAAhB;;AACA,QAAID,cAAc,IAAIC,QAAtB,EAAgC;AAC9B,WAAKC,MAAL,GAAcF,cAAc,CAACC,QAAD,CAA5B;AACD;AACF;;;;WAED,gBAAQE,cAAR,EAAwB;AACtB,aAAO,KAAKD,MAAL,CAAYE,MAAZ,CAAmBD,cAAnB,CAAP;AACD;;;WAED,gBAAQA,cAAR,EAAwB;AACtB,aAAO,KAAKD,MAAL,CAAYG,MAAZ,CAAmBF,cAAnB,CAAP;AACD;;;WAED,yBAAiB;AACf,aAAO,KAAKD,MAAZ;AACD;;;;;;AAGHI,MAAM,CAACC,OAAP,GAAiBV,IAAjB","sourcesContent":["'use strict'\n\nclass Base {\n  constructor (name, code, implementation, alphabet) {\n    this.name = name\n    this.code = code\n    this.alphabet = alphabet\n    if (implementation && alphabet) {\n      this.engine = implementation(alphabet)\n    }\n  }\n\n  encode (stringOrBuffer) {\n    return this.engine.encode(stringOrBuffer)\n  }\n\n  decode (stringOrBuffer) {\n    return this.engine.decode(stringOrBuffer)\n  }\n\n  isImplemented () {\n    return this.engine\n  }\n}\n\nmodule.exports = Base\n"]},"metadata":{},"sourceType":"script"}