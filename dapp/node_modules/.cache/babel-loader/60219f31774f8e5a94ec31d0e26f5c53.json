{"ast":null,"code":"import warning from 'warning';\n\nvar createTransitionManager = function createTransitionManager() {\n  var prompt = null;\n\n  var setPrompt = function setPrompt(nextPrompt) {\n    warning(prompt == null, 'A history supports only one prompt at a time');\n    prompt = nextPrompt;\n    return function () {\n      if (prompt === nextPrompt) prompt = null;\n    };\n  };\n\n  var confirmTransitionTo = function confirmTransitionTo(location, action, getUserConfirmation, callback) {\n    // TODO: If another transition starts while we're still confirming\n    // the previous one, we may end up in a weird state. Figure out the\n    // best way to handle this.\n    if (prompt != null) {\n      var result = typeof prompt === 'function' ? prompt(location, action) : prompt;\n\n      if (typeof result === 'string') {\n        if (typeof getUserConfirmation === 'function') {\n          getUserConfirmation(result, callback);\n        } else {\n          warning(false, 'A history needs a getUserConfirmation function in order to use a prompt message');\n          callback(true);\n        }\n      } else {\n        // Return false from a transition hook to cancel the transition.\n        callback(result !== false);\n      }\n    } else {\n      callback(true);\n    }\n  };\n\n  var listeners = [];\n\n  var appendListener = function appendListener(fn) {\n    var isActive = true;\n\n    var listener = function listener() {\n      if (isActive) fn.apply(undefined, arguments);\n    };\n\n    listeners.push(listener);\n    return function () {\n      isActive = false;\n      listeners = listeners.filter(function (item) {\n        return item !== listener;\n      });\n    };\n  };\n\n  var notifyListeners = function notifyListeners() {\n    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    listeners.forEach(function (listener) {\n      return listener.apply(undefined, args);\n    });\n  };\n\n  return {\n    setPrompt: setPrompt,\n    confirmTransitionTo: confirmTransitionTo,\n    appendListener: appendListener,\n    notifyListeners: notifyListeners\n  };\n};\n\nexport default createTransitionManager;","map":{"version":3,"sources":["C:/Users/kotgi/Desktop/Health-Chain/dapp/node_modules/history/es/createTransitionManager.js"],"names":["warning","createTransitionManager","prompt","setPrompt","nextPrompt","confirmTransitionTo","location","action","getUserConfirmation","callback","result","listeners","appendListener","fn","isActive","listener","apply","undefined","arguments","push","filter","item","notifyListeners","_len","length","args","Array","_key","forEach"],"mappings":"AAAA,OAAOA,OAAP,MAAoB,SAApB;;AAEA,IAAIC,uBAAuB,GAAG,SAASA,uBAAT,GAAmC;AAC/D,MAAIC,MAAM,GAAG,IAAb;;AAEA,MAAIC,SAAS,GAAG,SAASA,SAAT,CAAmBC,UAAnB,EAA+B;AAC7CJ,IAAAA,OAAO,CAACE,MAAM,IAAI,IAAX,EAAiB,8CAAjB,CAAP;AAEAA,IAAAA,MAAM,GAAGE,UAAT;AAEA,WAAO,YAAY;AACjB,UAAIF,MAAM,KAAKE,UAAf,EAA2BF,MAAM,GAAG,IAAT;AAC5B,KAFD;AAGD,GARD;;AAUA,MAAIG,mBAAmB,GAAG,SAASA,mBAAT,CAA6BC,QAA7B,EAAuCC,MAAvC,EAA+CC,mBAA/C,EAAoEC,QAApE,EAA8E;AACtG;AACA;AACA;AACA,QAAIP,MAAM,IAAI,IAAd,EAAoB;AAClB,UAAIQ,MAAM,GAAG,OAAOR,MAAP,KAAkB,UAAlB,GAA+BA,MAAM,CAACI,QAAD,EAAWC,MAAX,CAArC,GAA0DL,MAAvE;;AAEA,UAAI,OAAOQ,MAAP,KAAkB,QAAtB,EAAgC;AAC9B,YAAI,OAAOF,mBAAP,KAA+B,UAAnC,EAA+C;AAC7CA,UAAAA,mBAAmB,CAACE,MAAD,EAASD,QAAT,CAAnB;AACD,SAFD,MAEO;AACLT,UAAAA,OAAO,CAAC,KAAD,EAAQ,iFAAR,CAAP;AAEAS,UAAAA,QAAQ,CAAC,IAAD,CAAR;AACD;AACF,OARD,MAQO;AACL;AACAA,QAAAA,QAAQ,CAACC,MAAM,KAAK,KAAZ,CAAR;AACD;AACF,KAfD,MAeO;AACLD,MAAAA,QAAQ,CAAC,IAAD,CAAR;AACD;AACF,GAtBD;;AAwBA,MAAIE,SAAS,GAAG,EAAhB;;AAEA,MAAIC,cAAc,GAAG,SAASA,cAAT,CAAwBC,EAAxB,EAA4B;AAC/C,QAAIC,QAAQ,GAAG,IAAf;;AAEA,QAAIC,QAAQ,GAAG,SAASA,QAAT,GAAoB;AACjC,UAAID,QAAJ,EAAcD,EAAE,CAACG,KAAH,CAASC,SAAT,EAAoBC,SAApB;AACf,KAFD;;AAIAP,IAAAA,SAAS,CAACQ,IAAV,CAAeJ,QAAf;AAEA,WAAO,YAAY;AACjBD,MAAAA,QAAQ,GAAG,KAAX;AACAH,MAAAA,SAAS,GAAGA,SAAS,CAACS,MAAV,CAAiB,UAAUC,IAAV,EAAgB;AAC3C,eAAOA,IAAI,KAAKN,QAAhB;AACD,OAFW,CAAZ;AAGD,KALD;AAMD,GAfD;;AAiBA,MAAIO,eAAe,GAAG,SAASA,eAAT,GAA2B;AAC/C,SAAK,IAAIC,IAAI,GAAGL,SAAS,CAACM,MAArB,EAA6BC,IAAI,GAAGC,KAAK,CAACH,IAAD,CAAzC,EAAiDI,IAAI,GAAG,CAA7D,EAAgEA,IAAI,GAAGJ,IAAvE,EAA6EI,IAAI,EAAjF,EAAqF;AACnFF,MAAAA,IAAI,CAACE,IAAD,CAAJ,GAAaT,SAAS,CAACS,IAAD,CAAtB;AACD;;AAEDhB,IAAAA,SAAS,CAACiB,OAAV,CAAkB,UAAUb,QAAV,EAAoB;AACpC,aAAOA,QAAQ,CAACC,KAAT,CAAeC,SAAf,EAA0BQ,IAA1B,CAAP;AACD,KAFD;AAGD,GARD;;AAUA,SAAO;AACLtB,IAAAA,SAAS,EAAEA,SADN;AAELE,IAAAA,mBAAmB,EAAEA,mBAFhB;AAGLO,IAAAA,cAAc,EAAEA,cAHX;AAILU,IAAAA,eAAe,EAAEA;AAJZ,GAAP;AAMD,CAxED;;AA0EA,eAAerB,uBAAf","sourcesContent":["import warning from 'warning';\n\nvar createTransitionManager = function createTransitionManager() {\n  var prompt = null;\n\n  var setPrompt = function setPrompt(nextPrompt) {\n    warning(prompt == null, 'A history supports only one prompt at a time');\n\n    prompt = nextPrompt;\n\n    return function () {\n      if (prompt === nextPrompt) prompt = null;\n    };\n  };\n\n  var confirmTransitionTo = function confirmTransitionTo(location, action, getUserConfirmation, callback) {\n    // TODO: If another transition starts while we're still confirming\n    // the previous one, we may end up in a weird state. Figure out the\n    // best way to handle this.\n    if (prompt != null) {\n      var result = typeof prompt === 'function' ? prompt(location, action) : prompt;\n\n      if (typeof result === 'string') {\n        if (typeof getUserConfirmation === 'function') {\n          getUserConfirmation(result, callback);\n        } else {\n          warning(false, 'A history needs a getUserConfirmation function in order to use a prompt message');\n\n          callback(true);\n        }\n      } else {\n        // Return false from a transition hook to cancel the transition.\n        callback(result !== false);\n      }\n    } else {\n      callback(true);\n    }\n  };\n\n  var listeners = [];\n\n  var appendListener = function appendListener(fn) {\n    var isActive = true;\n\n    var listener = function listener() {\n      if (isActive) fn.apply(undefined, arguments);\n    };\n\n    listeners.push(listener);\n\n    return function () {\n      isActive = false;\n      listeners = listeners.filter(function (item) {\n        return item !== listener;\n      });\n    };\n  };\n\n  var notifyListeners = function notifyListeners() {\n    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    listeners.forEach(function (listener) {\n      return listener.apply(undefined, args);\n    });\n  };\n\n  return {\n    setPrompt: setPrompt,\n    confirmTransitionTo: confirmTransitionTo,\n    appendListener: appendListener,\n    notifyListeners: notifyListeners\n  };\n};\n\nexport default createTransitionManager;"]},"metadata":{},"sourceType":"module"}