{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Address = void 0;\n\nvar assert_1 = __importDefault(require(\"assert\"));\n\nvar bn_js_1 = __importDefault(require(\"bn.js\"));\n\nvar bytes_1 = require(\"./bytes\");\n\nvar account_1 = require(\"./account\");\n\nvar Address = function () {\n  function Address(buf) {\n    assert_1.default(buf.length === 20, 'Invalid address length');\n    this.buf = buf;\n  }\n  /**\n   * Returns the zero address.\n   */\n\n\n  Address.zero = function () {\n    return new Address(bytes_1.zeros(20));\n  };\n  /**\n   * Returns an Address object from a hex-encoded string.\n   * @param str - Hex-encoded address\n   */\n\n\n  Address.fromString = function (str) {\n    assert_1.default(account_1.isValidAddress(str), 'Invalid address');\n    return new Address(bytes_1.toBuffer(str));\n  };\n  /**\n   * Returns an address for a given public key.\n   * @param pubKey The two points of an uncompressed key\n   */\n\n\n  Address.fromPublicKey = function (pubKey) {\n    assert_1.default(Buffer.isBuffer(pubKey), 'Public key should be Buffer');\n    var buf = account_1.pubToAddress(pubKey);\n    return new Address(buf);\n  };\n  /**\n   * Returns an address for a given private key.\n   * @param privateKey A private key must be 256 bits wide\n   */\n\n\n  Address.fromPrivateKey = function (privateKey) {\n    assert_1.default(Buffer.isBuffer(privateKey), 'Private key should be Buffer');\n    var buf = account_1.privateToAddress(privateKey);\n    return new Address(buf);\n  };\n  /**\n   * Generates an address for a newly created contract.\n   * @param from The address which is creating this new address\n   * @param nonce The nonce of the from account\n   */\n\n\n  Address.generate = function (from, nonce) {\n    assert_1.default(bn_js_1.default.isBN(nonce));\n    return new Address(account_1.generateAddress(from.buf, nonce.toArrayLike(Buffer)));\n  };\n  /**\n   * Generates an address for a contract created using CREATE2.\n   * @param from The address which is creating this new address\n   * @param salt A salt\n   * @param initCode The init code of the contract being created\n   */\n\n\n  Address.generate2 = function (from, salt, initCode) {\n    assert_1.default(Buffer.isBuffer(salt));\n    assert_1.default(Buffer.isBuffer(initCode));\n    return new Address(account_1.generateAddress2(from.buf, salt, initCode));\n  };\n  /**\n   * Is address equal to another.\n   */\n\n\n  Address.prototype.equals = function (address) {\n    return this.buf.equals(address.buf);\n  };\n  /**\n   * Is address zero.\n   */\n\n\n  Address.prototype.isZero = function () {\n    return this.equals(Address.zero());\n  };\n  /**\n   * True if address is in the address range defined\n   * by EIP-1352\n   */\n\n\n  Address.prototype.isPrecompileOrSystemAddress = function () {\n    var addressBN = new bn_js_1.default(this.buf);\n    var rangeMin = new bn_js_1.default(0);\n    var rangeMax = new bn_js_1.default('ffff', 'hex');\n    return addressBN.gte(rangeMin) && addressBN.lte(rangeMax);\n  };\n  /**\n   * Returns hex encoding of address.\n   */\n\n\n  Address.prototype.toString = function () {\n    return '0x' + this.buf.toString('hex');\n  };\n  /**\n   * Returns Buffer representation of address.\n   */\n\n\n  Address.prototype.toBuffer = function () {\n    return Buffer.from(this.buf);\n  };\n\n  return Address;\n}();\n\nexports.Address = Address;","map":{"version":3,"sources":["../src/address.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Address = void 0;\nvar assert_1 = __importDefault(require(\"assert\"));\nvar bn_js_1 = __importDefault(require(\"bn.js\"));\nvar bytes_1 = require(\"./bytes\");\nvar account_1 = require(\"./account\");\nvar Address = /** @class */ (function () {\n    function Address(buf) {\n        assert_1.default(buf.length === 20, 'Invalid address length');\n        this.buf = buf;\n    }\n    /**\n     * Returns the zero address.\n     */\n    Address.zero = function () {\n        return new Address(bytes_1.zeros(20));\n    };\n    /**\n     * Returns an Address object from a hex-encoded string.\n     * @param str - Hex-encoded address\n     */\n    Address.fromString = function (str) {\n        assert_1.default(account_1.isValidAddress(str), 'Invalid address');\n        return new Address(bytes_1.toBuffer(str));\n    };\n    /**\n     * Returns an address for a given public key.\n     * @param pubKey The two points of an uncompressed key\n     */\n    Address.fromPublicKey = function (pubKey) {\n        assert_1.default(Buffer.isBuffer(pubKey), 'Public key should be Buffer');\n        var buf = account_1.pubToAddress(pubKey);\n        return new Address(buf);\n    };\n    /**\n     * Returns an address for a given private key.\n     * @param privateKey A private key must be 256 bits wide\n     */\n    Address.fromPrivateKey = function (privateKey) {\n        assert_1.default(Buffer.isBuffer(privateKey), 'Private key should be Buffer');\n        var buf = account_1.privateToAddress(privateKey);\n        return new Address(buf);\n    };\n    /**\n     * Generates an address for a newly created contract.\n     * @param from The address which is creating this new address\n     * @param nonce The nonce of the from account\n     */\n    Address.generate = function (from, nonce) {\n        assert_1.default(bn_js_1.default.isBN(nonce));\n        return new Address(account_1.generateAddress(from.buf, nonce.toArrayLike(Buffer)));\n    };\n    /**\n     * Generates an address for a contract created using CREATE2.\n     * @param from The address which is creating this new address\n     * @param salt A salt\n     * @param initCode The init code of the contract being created\n     */\n    Address.generate2 = function (from, salt, initCode) {\n        assert_1.default(Buffer.isBuffer(salt));\n        assert_1.default(Buffer.isBuffer(initCode));\n        return new Address(account_1.generateAddress2(from.buf, salt, initCode));\n    };\n    /**\n     * Is address equal to another.\n     */\n    Address.prototype.equals = function (address) {\n        return this.buf.equals(address.buf);\n    };\n    /**\n     * Is address zero.\n     */\n    Address.prototype.isZero = function () {\n        return this.equals(Address.zero());\n    };\n    /**\n     * True if address is in the address range defined\n     * by EIP-1352\n     */\n    Address.prototype.isPrecompileOrSystemAddress = function () {\n        var addressBN = new bn_js_1.default(this.buf);\n        var rangeMin = new bn_js_1.default(0);\n        var rangeMax = new bn_js_1.default('ffff', 'hex');\n        return addressBN.gte(rangeMin) && addressBN.lte(rangeMax);\n    };\n    /**\n     * Returns hex encoding of address.\n     */\n    Address.prototype.toString = function () {\n        return '0x' + this.buf.toString('hex');\n    };\n    /**\n     * Returns Buffer representation of address.\n     */\n    Address.prototype.toBuffer = function () {\n        return Buffer.from(this.buf);\n    };\n    return Address;\n}());\nexports.Address = Address;\n//# sourceMappingURL=address.js.map"]},"metadata":{},"sourceType":"script"}