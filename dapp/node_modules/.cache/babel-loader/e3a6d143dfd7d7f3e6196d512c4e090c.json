{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.baToJSON = exports.addHexPrefix = exports.toUnsigned = exports.fromSigned = exports.bufferToHex = exports.bufferToInt = exports.toBuffer = exports.unpadHexString = exports.unpadArray = exports.unpadBuffer = exports.setLengthRight = exports.setLengthLeft = exports.zeros = void 0;\n\nvar bn_js_1 = __importDefault(require(\"bn.js\"));\n\nvar ethjs_util_1 = require(\"ethjs-util\");\n\nvar helpers_1 = require(\"./helpers\");\n/**\n * Returns a buffer filled with 0s.\n * @param bytes the number of bytes the buffer should be\n */\n\n\nexports.zeros = function (bytes) {\n  return Buffer.allocUnsafe(bytes).fill(0);\n};\n/**\n * Pads a `Buffer` with zeros till it has `length` bytes.\n * Truncates the beginning or end of input if its length exceeds `length`.\n * @param msg the value to pad (Buffer)\n * @param length the number of bytes the output should be\n * @param right whether to start padding form the left or right\n * @return (Buffer)\n */\n\n\nvar setLength = function setLength(msg, length, right) {\n  var buf = exports.zeros(length);\n\n  if (right) {\n    if (msg.length < length) {\n      msg.copy(buf);\n      return buf;\n    }\n\n    return msg.slice(0, length);\n  } else {\n    if (msg.length < length) {\n      msg.copy(buf, length - msg.length);\n      return buf;\n    }\n\n    return msg.slice(-length);\n  }\n};\n/**\n * Left Pads a `Buffer` with leading zeros till it has `length` bytes.\n * Or it truncates the beginning if it exceeds.\n * @param msg the value to pad (Buffer)\n * @param length the number of bytes the output should be\n * @return (Buffer)\n */\n\n\nexports.setLengthLeft = function (msg, length) {\n  helpers_1.assertIsBuffer(msg);\n  return setLength(msg, length, false);\n};\n/**\n * Right Pads a `Buffer` with trailing zeros till it has `length` bytes.\n * it truncates the end if it exceeds.\n * @param msg the value to pad (Buffer)\n * @param length the number of bytes the output should be\n * @return (Buffer)\n */\n\n\nexports.setLengthRight = function (msg, length) {\n  helpers_1.assertIsBuffer(msg);\n  return setLength(msg, length, true);\n};\n/**\n * Trims leading zeros from a `Buffer`, `String` or `Number[]`.\n * @param a (Buffer|Array|String)\n * @return (Buffer|Array|String)\n */\n\n\nvar stripZeros = function stripZeros(a) {\n  var first = a[0];\n\n  while (a.length > 0 && first.toString() === '0') {\n    a = a.slice(1);\n    first = a[0];\n  }\n\n  return a;\n};\n/**\n * Trims leading zeros from a `Buffer`.\n * @param a (Buffer)\n * @return (Buffer)\n */\n\n\nexports.unpadBuffer = function (a) {\n  helpers_1.assertIsBuffer(a);\n  return stripZeros(a);\n};\n/**\n * Trims leading zeros from an `Array` (of numbers).\n * @param a (number[])\n * @return (number[])\n */\n\n\nexports.unpadArray = function (a) {\n  helpers_1.assertIsArray(a);\n  return stripZeros(a);\n};\n/**\n * Trims leading zeros from a hex-prefixed `String`.\n * @param a (String)\n * @return (String)\n */\n\n\nexports.unpadHexString = function (a) {\n  helpers_1.assertIsHexString(a);\n  a = ethjs_util_1.stripHexPrefix(a);\n  return stripZeros(a);\n};\n/**\n * Attempts to turn a value into a `Buffer`.\n * Inputs supported: `Buffer`, `String` (hex-prefixed), `Number`, null/undefined, `BN` and other objects\n * with a `toArray()` or `toBuffer()` method.\n * @param v the value\n */\n\n\nexports.toBuffer = function (v) {\n  if (v === null || v === undefined) {\n    return Buffer.allocUnsafe(0);\n  }\n\n  if (Buffer.isBuffer(v)) {\n    return Buffer.from(v);\n  }\n\n  if (Array.isArray(v) || v instanceof Uint8Array) {\n    return Buffer.from(v);\n  }\n\n  if (typeof v === 'string') {\n    if (!ethjs_util_1.isHexString(v)) {\n      throw new Error(\"Cannot convert string to buffer. toBuffer only supports 0x-prefixed hex strings and this string was given: \" + v);\n    }\n\n    return Buffer.from(ethjs_util_1.padToEven(ethjs_util_1.stripHexPrefix(v)), 'hex');\n  }\n\n  if (typeof v === 'number') {\n    return ethjs_util_1.intToBuffer(v);\n  }\n\n  if (bn_js_1.default.isBN(v)) {\n    return v.toArrayLike(Buffer);\n  }\n\n  if (v.toArray) {\n    // converts a BN to a Buffer\n    return Buffer.from(v.toArray());\n  }\n\n  if (v.toBuffer) {\n    return Buffer.from(v.toBuffer());\n  }\n\n  throw new Error('invalid type');\n};\n/**\n * Converts a `Buffer` to a `Number`.\n * @param buf `Buffer` object to convert\n * @throws If the input number exceeds 53 bits.\n */\n\n\nexports.bufferToInt = function (buf) {\n  return new bn_js_1.default(exports.toBuffer(buf)).toNumber();\n};\n/**\n * Converts a `Buffer` into a `0x`-prefixed hex `String`.\n * @param buf `Buffer` object to convert\n */\n\n\nexports.bufferToHex = function (buf) {\n  buf = exports.toBuffer(buf);\n  return '0x' + buf.toString('hex');\n};\n/**\n * Interprets a `Buffer` as a signed integer and returns a `BN`. Assumes 256-bit numbers.\n * @param num Signed integer value\n */\n\n\nexports.fromSigned = function (num) {\n  return new bn_js_1.default(num).fromTwos(256);\n};\n/**\n * Converts a `BN` to an unsigned integer and returns it as a `Buffer`. Assumes 256-bit numbers.\n * @param num\n */\n\n\nexports.toUnsigned = function (num) {\n  return Buffer.from(num.toTwos(256).toArray());\n};\n/**\n * Adds \"0x\" to a given `String` if it does not already start with \"0x\".\n */\n\n\nexports.addHexPrefix = function (str) {\n  if (typeof str !== 'string') {\n    return str;\n  }\n\n  return ethjs_util_1.isHexPrefixed(str) ? str : '0x' + str;\n};\n/**\n * Converts a `Buffer` or `Array` to JSON.\n * @param ba (Buffer|Array)\n * @return (Array|String|null)\n */\n\n\nexports.baToJSON = function (ba) {\n  if (Buffer.isBuffer(ba)) {\n    return \"0x\" + ba.toString('hex');\n  } else if (ba instanceof Array) {\n    var array = [];\n\n    for (var i = 0; i < ba.length; i++) {\n      array.push(exports.baToJSON(ba[i]));\n    }\n\n    return array;\n  }\n};","map":{"version":3,"sources":["../src/bytes.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.baToJSON = exports.addHexPrefix = exports.toUnsigned = exports.fromSigned = exports.bufferToHex = exports.bufferToInt = exports.toBuffer = exports.unpadHexString = exports.unpadArray = exports.unpadBuffer = exports.setLengthRight = exports.setLengthLeft = exports.zeros = void 0;\nvar bn_js_1 = __importDefault(require(\"bn.js\"));\nvar ethjs_util_1 = require(\"ethjs-util\");\nvar helpers_1 = require(\"./helpers\");\n/**\n * Returns a buffer filled with 0s.\n * @param bytes the number of bytes the buffer should be\n */\nexports.zeros = function (bytes) {\n    return Buffer.allocUnsafe(bytes).fill(0);\n};\n/**\n * Pads a `Buffer` with zeros till it has `length` bytes.\n * Truncates the beginning or end of input if its length exceeds `length`.\n * @param msg the value to pad (Buffer)\n * @param length the number of bytes the output should be\n * @param right whether to start padding form the left or right\n * @return (Buffer)\n */\nvar setLength = function (msg, length, right) {\n    var buf = exports.zeros(length);\n    if (right) {\n        if (msg.length < length) {\n            msg.copy(buf);\n            return buf;\n        }\n        return msg.slice(0, length);\n    }\n    else {\n        if (msg.length < length) {\n            msg.copy(buf, length - msg.length);\n            return buf;\n        }\n        return msg.slice(-length);\n    }\n};\n/**\n * Left Pads a `Buffer` with leading zeros till it has `length` bytes.\n * Or it truncates the beginning if it exceeds.\n * @param msg the value to pad (Buffer)\n * @param length the number of bytes the output should be\n * @return (Buffer)\n */\nexports.setLengthLeft = function (msg, length) {\n    helpers_1.assertIsBuffer(msg);\n    return setLength(msg, length, false);\n};\n/**\n * Right Pads a `Buffer` with trailing zeros till it has `length` bytes.\n * it truncates the end if it exceeds.\n * @param msg the value to pad (Buffer)\n * @param length the number of bytes the output should be\n * @return (Buffer)\n */\nexports.setLengthRight = function (msg, length) {\n    helpers_1.assertIsBuffer(msg);\n    return setLength(msg, length, true);\n};\n/**\n * Trims leading zeros from a `Buffer`, `String` or `Number[]`.\n * @param a (Buffer|Array|String)\n * @return (Buffer|Array|String)\n */\nvar stripZeros = function (a) {\n    var first = a[0];\n    while (a.length > 0 && first.toString() === '0') {\n        a = a.slice(1);\n        first = a[0];\n    }\n    return a;\n};\n/**\n * Trims leading zeros from a `Buffer`.\n * @param a (Buffer)\n * @return (Buffer)\n */\nexports.unpadBuffer = function (a) {\n    helpers_1.assertIsBuffer(a);\n    return stripZeros(a);\n};\n/**\n * Trims leading zeros from an `Array` (of numbers).\n * @param a (number[])\n * @return (number[])\n */\nexports.unpadArray = function (a) {\n    helpers_1.assertIsArray(a);\n    return stripZeros(a);\n};\n/**\n * Trims leading zeros from a hex-prefixed `String`.\n * @param a (String)\n * @return (String)\n */\nexports.unpadHexString = function (a) {\n    helpers_1.assertIsHexString(a);\n    a = ethjs_util_1.stripHexPrefix(a);\n    return stripZeros(a);\n};\n/**\n * Attempts to turn a value into a `Buffer`.\n * Inputs supported: `Buffer`, `String` (hex-prefixed), `Number`, null/undefined, `BN` and other objects\n * with a `toArray()` or `toBuffer()` method.\n * @param v the value\n */\nexports.toBuffer = function (v) {\n    if (v === null || v === undefined) {\n        return Buffer.allocUnsafe(0);\n    }\n    if (Buffer.isBuffer(v)) {\n        return Buffer.from(v);\n    }\n    if (Array.isArray(v) || v instanceof Uint8Array) {\n        return Buffer.from(v);\n    }\n    if (typeof v === 'string') {\n        if (!ethjs_util_1.isHexString(v)) {\n            throw new Error(\"Cannot convert string to buffer. toBuffer only supports 0x-prefixed hex strings and this string was given: \" + v);\n        }\n        return Buffer.from(ethjs_util_1.padToEven(ethjs_util_1.stripHexPrefix(v)), 'hex');\n    }\n    if (typeof v === 'number') {\n        return ethjs_util_1.intToBuffer(v);\n    }\n    if (bn_js_1.default.isBN(v)) {\n        return v.toArrayLike(Buffer);\n    }\n    if (v.toArray) {\n        // converts a BN to a Buffer\n        return Buffer.from(v.toArray());\n    }\n    if (v.toBuffer) {\n        return Buffer.from(v.toBuffer());\n    }\n    throw new Error('invalid type');\n};\n/**\n * Converts a `Buffer` to a `Number`.\n * @param buf `Buffer` object to convert\n * @throws If the input number exceeds 53 bits.\n */\nexports.bufferToInt = function (buf) {\n    return new bn_js_1.default(exports.toBuffer(buf)).toNumber();\n};\n/**\n * Converts a `Buffer` into a `0x`-prefixed hex `String`.\n * @param buf `Buffer` object to convert\n */\nexports.bufferToHex = function (buf) {\n    buf = exports.toBuffer(buf);\n    return '0x' + buf.toString('hex');\n};\n/**\n * Interprets a `Buffer` as a signed integer and returns a `BN`. Assumes 256-bit numbers.\n * @param num Signed integer value\n */\nexports.fromSigned = function (num) {\n    return new bn_js_1.default(num).fromTwos(256);\n};\n/**\n * Converts a `BN` to an unsigned integer and returns it as a `Buffer`. Assumes 256-bit numbers.\n * @param num\n */\nexports.toUnsigned = function (num) {\n    return Buffer.from(num.toTwos(256).toArray());\n};\n/**\n * Adds \"0x\" to a given `String` if it does not already start with \"0x\".\n */\nexports.addHexPrefix = function (str) {\n    if (typeof str !== 'string') {\n        return str;\n    }\n    return ethjs_util_1.isHexPrefixed(str) ? str : '0x' + str;\n};\n/**\n * Converts a `Buffer` or `Array` to JSON.\n * @param ba (Buffer|Array)\n * @return (Array|String|null)\n */\nexports.baToJSON = function (ba) {\n    if (Buffer.isBuffer(ba)) {\n        return \"0x\" + ba.toString('hex');\n    }\n    else if (ba instanceof Array) {\n        var array = [];\n        for (var i = 0; i < ba.length; i++) {\n            array.push(exports.baToJSON(ba[i]));\n        }\n        return array;\n    }\n};\n//# sourceMappingURL=bytes.js.map"]},"metadata":{},"sourceType":"script"}